{"/home/travis/build/npmtest/node-npmtest-grunt-phantomas/test.js":"/* istanbul instrument in package npmtest_grunt_phantomas */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-phantomas/lib.npmtest_grunt_phantomas.js":"/* istanbul instrument in package npmtest_grunt_phantomas */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_phantomas = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_phantomas = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-phantomas/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-phantomas && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_phantomas */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_phantomas\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_phantomas.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_phantomas.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_phantomas.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_phantomas.__dirname + '/lib.npmtest_grunt_phantomas.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-phantomas/node_modules/grunt-phantomas/Gruntfile.js":"/*\n * grunt-phantomas\n * https://github.com/stefanjudis/grunt-phantomas\n *\n * Copyright (c) 2013 stefan judis\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function( grunt ) {\n  var devIndexPath = './phantomas/';\n\n  grunt.initConfig( {\n\n    clean : {\n      /* https://github.com/gruntjs/grunt-contrib-clean */\n      tests : [ 'tmp' ],\n    },\n\n\n    compass : {\n      /* https://github.com/gruntjs/grunt-contrib-compass */\n      dist : {\n        options : {\n          sassDir     : 'tasks/assets/sass',\n          cssDir      : 'tasks/public/styles',\n          environment : 'production'\n        }\n      }\n    },\n\n\n    copy : {\n      /* https://github.com/gruntjs/grunt-contrib-copy */\n      scripts : {\n        files : [\n          {\n            cwd    : 'tasks/public/scripts/',\n            expand : true,\n            src    : [ '**' ],\n            dest   : devIndexPath + 'public/scripts/',\n            filter : 'isFile'\n          },\n        ]\n      },\n      styles : {\n        files : [\n          {\n            cwd    : 'tasks/public/styles/',\n            expand : true,\n            src    : [ '**' ],\n            dest   : devIndexPath + 'public/styles/',\n            filter : 'isFile'\n          },\n        ]\n      }\n    },\n\n\n    jscs : {\n      /* https://www.npmjs.org/package/grunt-jscs-checker */\n      src     : [\n        'Gruntfile.js',\n        'tasks/assets/**/*.js',\n        '!tasks/assets/scripts/d3.min.js',\n        'tasks/lib/phantomas.js',\n        '<%= nodeunit.tests %>',\n      ],\n      options : {\n        config : '.jscs.json'\n      }\n    },\n\n\n    jshint : {\n      /* https://github.com/gruntjs/grunt-contrib-jshint */\n      all : [\n        'Gruntfile.js',\n        'tasks/assets/**/*.js',\n        '!tasks/assets/scripts/d3.min.js',\n        'tasks/lib/**/phantomas.js',\n        '<%= nodeunit.tests %>',\n      ],\n      options : {\n        jshintrc : '.jshintrc',\n      },\n    },\n\n\n    phantomas : {\n      /* https://github.com/stefanjudis/grunt-phantomas */\n      grunt : {\n        options : {\n          assertions : {\n            'assetsWithQueryString' : 3,\n            'biggestLatency'        : 1400,\n            'bodyHTMLSize'          : 10500,\n            'commentsSize'          : 55,\n            'consoleMessages'       : 0,\n            'hiddenContentSize'     : 65,\n            'jsErrors'              : 0,\n            'gzipRequests'          : {\n              'type'  : '<',\n              'value' : 8\n            },\n            'medianResponse'        : 400,\n            'nodesWithInlineCSS'    : 0,\n            'requests'              : 30,\n            'timeToFirstImage'      : 1100,\n            'DOMelementsCount'      : 200,\n            'DOMqueries'            : 10\n          },\n          // additionalStylesheet : '/Users/stefan/Desktop/custom2.css',\n          // buildUi              : false,\n          // output               : 'json',\n          // limitIncludedRuns    : false,\n          indexPath            : './phantomas/',\n          options              : {\n            'timeout'        : 30\n          },\n          url                  : 'http://gruntjs.com/'\n        }\n      }\n    },\n\n\n    nodeunit : {\n      /* https://github.com/gruntjs/grunt-contrib-nodeunit */\n      tests : [ 'test/**/*Test.js' ],\n    },\n\n\n    uglify : {\n      /* https://github.com/gruntjs/grunt-contrib-uglify */\n      options : {\n        mangle : false\n      },\n      phantomas : {\n        files : {\n          'tasks/public/scripts/phantomas.min.js' : [ 'tasks/assets/scripts/phantomas.js' ]\n        }\n      }\n    },\n\n\n    watch : {\n      /* https://github.com/gruntjs/grunt-contrib-watch */\n      js : {\n        files   : [ 'tasks/assets/scripts/**/*.js' ],\n        flatten : true,\n        options : {\n          spawn : false,\n        },\n        tasks   : [ 'uglify', 'copy:scripts' ]\n      },\n      sass : {\n        files   : [ 'tasks/assets/sass/**/*.scss' ],\n        flatten : true,\n        options : {\n          spawn : false,\n        },\n        tasks   : [ 'compass', 'copy:styles' ]\n      }\n    }\n  } );\n\n  // Actually load this plugin's task(s).\n  grunt.loadTasks( 'tasks' );\n\n  // These plugins provide necessary tasks.\n  grunt.loadNpmTasks( 'grunt-contrib-clean' );\n  grunt.loadNpmTasks( 'grunt-contrib-compass' );\n  grunt.loadNpmTasks( 'grunt-contrib-copy' );\n  grunt.loadNpmTasks( 'grunt-jscs' );\n  grunt.loadNpmTasks( 'grunt-contrib-jshint' );\n  grunt.loadNpmTasks( 'grunt-contrib-nodeunit' );\n  grunt.loadNpmTasks( 'grunt-contrib-uglify' );\n  grunt.loadNpmTasks( 'grunt-contrib-watch' );\n\n  // Whenever the \"test\" task is run, first clean the \"tmp\" dir, then run this\n  // plugin's task(s), then test the result.\n  grunt.registerTask( 'test', [ 'clean', 'nodeunit', 'jshint', 'jscs' ] );\n\n  // By default, lint and run all tests.\n  grunt.registerTask( 'default', [ 'test' ] );\n\n  // Set up development environment\n  grunt.registerTask( 'build', [ 'compass', 'uglify', 'phantomas' ] );\n\n};\n","/home/travis/build/npmtest/node-npmtest-grunt-phantomas/node_modules/grunt-phantomas/index.js":"module.exports = process.env.PHANTOMAS_COV\n  ? require( './tasks/lib/phantomas-cov' )\n  : require( './tasks/lib/phantomas' );\n","/home/travis/build/npmtest/node-npmtest-grunt-phantomas/node_modules/grunt-phantomas/tasks/lib/phantomas.js":"/*\n * grunt-phantomas\n * https://github.com/stefanjudis/grunt-phantomas\n *\n * Copyright (c) 2013 stefan judis\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nvar Promise   = require( 'bluebird' );\nvar fs        = Promise.promisifyAll( require( 'node-fs' ) );\nvar path      = Promise.promisifyAll( require( 'path' ) );\nvar json2csv  = Promise.promisify( require( 'json2csv' ) );\nvar phantomas = require( 'phantomas' );\nvar _         = require( 'lodash' );\nvar minify    = require( 'html-minifier' ).minify;\n\n\n/**\n * Path to generated asset files\n * @type {String}\n */\nvar ASSETS_PATH = path.resolve(\n                    __dirname, '../public/'\n                  );\n\n\n/**\n * Path to index template\n * @type {String}\n */\nvar TEMPLATE_FILE = path.resolve(\n                      __dirname,\n                      '../tpl/index.tpl'\n                    );\n\n\n/**\n * Constructor for Phantomas\n *\n * @param {Object}   grunt   grunt\n * @param {Object}   options options\n * @param {Function} done    callback to be called when everything is done\n *                           or an error appeared\n *\n * @tested\n */\nvar Phantomas = function( grunt, options, done ) {\n  this.dataPath         = path.normalize(  options.indexPath + 'data/' );\n  this.done             = done;\n  this.failedAssertions = [];\n  this.grunt            = grunt;\n  this.imagePath        = path.normalize( options.indexPath + 'images/' );\n  this.options          = this.normalizeOptions( options );\n  this.timestamp        = +new Date();\n  this.buildUi          = options.buildUi;\n  this.version          = require( '../../package.json' ).version;\n};\n\n\n/**\n * Copy all needed assets from 'tasks/public'\n * to specified index path\n *\n * - phantomas.css\n * - phantomas.js\n *\n * @tested\n */\nPhantomas.prototype.copyAssets = function() {\n  this.grunt.log.subhead( 'PHANTOMAS ASSETS COPYING STARTED.' );\n\n  return new Promise( function( resolve ) {\n    if ( !fs.existsSync( this.options.indexPath + '/public' ) ) {\n      fs.mkdirSync( this.options.indexPath + '/public' );\n    }\n\n    this.copyStyles();\n    this.copyScripts();\n\n    resolve();\n  }.bind( this ) );\n};\n\n\n/**\n * Copy script files and create needed folders\n *\n * - d3.min.js\n * - phantomas.min.js\n *\n * @tested\n */\nPhantomas.prototype.copyScripts = function() {\n  if ( !fs.existsSync( this.options.indexPath + '/public/scripts' ) ) {\n    fs.mkdirSync( this.options.indexPath + '/public/scripts' );\n  }\n\n  var d3 = fs.readFileSync(\n    path.normalize( ASSETS_PATH + '/scripts/d3.min.js' )\n  );\n\n  fs.writeFileSync(\n    path.normalize( this.options.indexPath + '/public/scripts/d3.min.js' ),\n    d3\n  );\n\n  this.grunt.log.ok(\n    'Phantomas copied asset to \\'' + this.options.indexPath + 'public/scripts/d3.min.js\\'.'\n  );\n\n  var phantomas = fs.readFileSync(\n    path.normalize( ASSETS_PATH + '/scripts/phantomas.min.js' )\n  );\n\n  fs.writeFileSync(\n    path.normalize( this.options.indexPath + '/public/scripts/phantomas.min.js' ),\n    phantomas\n  );\n\n  this.grunt.log.ok(\n    'Phantomas copied asset to \\'' + this.options.indexPath + 'public/scripts/phantomas.min.js\\'.'\n  );\n};\n\n\n/**\n * Copy styles file and create needed folders\n *\n * @tested\n */\nPhantomas.prototype.copyStyles = function() {\n  if ( !fs.existsSync( this.options.indexPath + '/public/styles' ) ) {\n    fs.mkdirSync( this.options.indexPath + '/public/styles' );\n  }\n\n  var styles = fs.readFileSync(\n    path.normalize( ASSETS_PATH + '/styles/phantomas.css' )\n  );\n\n  fs.writeFileSync(\n    path.normalize( this.options.indexPath + '/public/styles/phantomas.css' ),\n    styles\n  );\n\n  this.grunt.log.ok(\n    'Phantomas copied asset to \\'' + this.options.indexPath + 'public/styles/phantomas.css\\'.'\n  );\n\n  if ( this.options.additionalStylesheet ) {\n    if ( fs.existsSync( this.options.additionalStylesheet ) ) {\n      fs.writeFileSync(\n        path.normalize( this.options.indexPath + '/public/styles/custom.css' ),\n        fs.readFileSync( this.options.additionalStylesheet )\n      );\n\n      this.grunt.log.ok(\n        'Phantomas copied custom stylesheet to \\'' +\n        this.options.indexPath +\n        'public/styles/custom.css\\'.'\n      );\n    } else {\n      this.grunt.log.error(\n        'Your additional stylesheet \\'' +\n        this.options.additionalStylesheet +\n        '\\' does not exist.'\n      );\n    }\n  }\n};\n\n\n/**\n * Create data directory in index path\n * if it doesn't exist yet\n *\n * TODO -> put it together with 'createDataDirectory'\n *\n * @return {Promise} Promise\n *\n * @tested\n */\nPhantomas.prototype.createDataDirectory = function() {\n  return new Promise( function( resolve ) {\n    var exists = fs.existsSync( this.dataPath );\n\n    if ( exists ) {\n      resolve();\n    } else {\n      fs.mkdirSync(\n        path.normalize(\n          this.options.indexPath + 'data'\n        )\n      );\n\n      resolve();\n    }\n  }.bind( this ) );\n};\n\n\n/**\n * Create index directory to make sure\n * files are writable according to set\n * indexPath\n *\n * TODO -> put it together with 'createDataDirectory'\n *\n * @return {Promise} Promise\n *\n * @tested\n */\nPhantomas.prototype.createIndexDirectory = function() {\n  return new Promise( function( resolve ) {\n    var exists = fs.existsSync( this.options.indexPath );\n    if ( exists ) {\n      resolve();\n    } else {\n      fs.mkdirSync(\n        path.normalize(\n          this.options.indexPath\n        ),\n        '0777',\n        true\n      );\n\n      resolve();\n    }\n  }.bind( this ) );\n};\n\n\n/**\n * Write final index.html file and handle all metrics\n *\n * @param  {Array}  results content of all metric files\n * @return {Promise}        Promise\n *\n * @tested\n */\nPhantomas.prototype.createIndexHtml = function( results ) {\n  return new Promise( function( resolve ) {\n    this.grunt.log.subhead( 'PHANTOMAS index.html WRITING STARTED.' );\n\n    var templateResults  = [];\n    var images           = this.getImages();\n\n    // check if all files were valid json\n    results.forEach( function( result ) {\n      if ( result.isFulfilled() ) {\n        templateResults.push( result.value() );\n      }\n    }.bind( this ) );\n\n    this.grunt.file.write(\n      this.options.indexPath + 'index.html',\n      this.grunt.template.process(\n        minify(\n          this.grunt.file.read( TEMPLATE_FILE ),\n          {\n            removeComments     : true,\n            // TODO fix me\n            // https://github.com/stefanjudis/grunt-phantomas/issues/93\n            collapseWhitespace : true\n          }\n        ),\n        { data : {\n          additionalStylesheet : this.options.additionalStylesheet,\n          assertions           : this.options.assertions,\n          failedAssertions     : this.failedAssertions,\n          group                : this.options.group,\n          images               : images,\n          meta                 : phantomas.metadata.metrics,\n          results              : templateResults,\n          timestamp            : this.timestamp,\n          url                  : this.options.url,\n          version              : this.version\n        } }\n      )\n    );\n\n    this.grunt.log.ok(\n      'Phantomas created new \\'index.html\\' at \\'' + this.options.indexPath + '\\'.'\n    );\n\n    resolve( templateResults );\n\n  }.bind( this ) );\n};\n\n\n/**\n * Execute phantomas a given number of times\n * ( set in options )\n *\n * @return {Promise} Promise that gets resolved when all\n *                           executions succeeded\n *\n * @tested\n */\nPhantomas.prototype.executePhantomas = function() {\n  var runs = [],\n  callPhantomas = function( url, options ) {\n    return new Promise( function( resolve, reject ) {\n      return phantomas( url, options ).then( resolve, reject );\n    } );\n  };\n\n  return new Promise( function( resolve, reject ) {\n    var options;\n\n    this.grunt.log.verbose.writeln(\n      'Executing phantomas ( ' + this.options.numberOfRuns + ' times ) with following parameters:\\n' +\n      JSON.stringify( this.options.options )\n    );\n\n    for ( var i = 0; i < this.options.numberOfRuns; ++i ) {\n      options = _.clone( this.options.options );\n\n      // run it only for the first run\n      if ( i === 0 && options[ 'film-strip' ] !== false ) {\n        options[ 'film-strip' ]     = true;\n        options[ 'film-strip-dir' ] = this.imagePath + this.timestamp;\n      }\n\n      runs.push( callPhantomas( this.options.url, options ) );\n    }\n\n    Promise\n      .all( runs.map( function( run ) {\n        return run.reflect();\n      } ) )\n      .then( function( runs ) {\n        return runs.reduce( function( result, run ) {\n          if ( run.isFulfilled() ) {\n            this.grunt.log.ok( 'Phantomas execution successful.' );\n            result.push( run.value().json );\n          } else {\n            var reason = run.reason();\n\n            if ( reason.json && reason.json.metrics ) {\n              this.grunt.log.error(\n                'Phantomas execution failed with ' + reason.code + ' but returned metrics.'\n              );\n              result.push( reason.json );\n            } else {\n              this.grunt.log.error(\n                'Phantomas execution failed with ' + reason.code\n              );\n            }\n          }\n\n          return result;\n        }.bind( this ), [] );\n      }.bind( this ) )\n      .then( resolve )\n      .catch( reject );\n  }.bind( this ) );\n};\n\n\n/**\n * Format the results of phantomas execution\n * and calculate statistic data\n *\n * @param  {Array} results results\n * @return {Object}        formated metrics\n *\n * @tested\n */\nPhantomas.prototype.formResult = function( results ) {\n  this.grunt.log.ok( this.options.numberOfRuns + ' Phantomas execution(s) done -> checking results:' );\n  return new Promise( function( resolve ) {\n    var assertions       = this.options.assertions,\n        entries          = {},\n        offenders        = {},\n        fulFilledMetrics = results[ 0 ].metrics,\n        entry,\n        metric;\n\n    _.each( fulFilledMetrics, function( value, key ) {\n      if (\n        typeof value !== 'undefined' &&\n        typeof value !== 'string'\n      ) {\n        entries[ key ] = {\n          values  : [],\n          sum     : 0,\n          min     : 0,\n          max     : 0,\n          median  : undefined,\n          average : undefined\n        };\n      }\n    } );\n\n    // process all runs\n    results.forEach( function( run ) {\n\n      var metric;\n\n      for ( metric in run.metrics ) {\n        if (\n          typeof run.metrics[ metric ] !== 'string' &&\n          typeof entries[ metric ] !== 'undefined'\n        ) {\n          entries[ metric ].values.push( run.metrics[ metric ] );\n        }\n      }\n\n      offenders = _.reduce( run.offenders, function( old, value, key ) {\n        old[ key ] = _.uniq( ( old[ key ] || [] ).concat( value ) );\n\n        return old;\n      }, offenders );\n    }, this );\n\n    /**\n     * Avoiding deep nesting for 'calculate stats'\n     *\n     * @param  {Number}  element element\n     * @return {Boolean}\n     */\n    function filterEntryValues( element ) {\n      return element !== null;\n    }\n\n    /**\n     * Avoiding deep nesting for 'calculate stats'\n     *\n     * @param  {Number} a value A\n     * @param  {Number} b value B\n     * @return {Number}   sorting value\n     */\n    function sortEntryValues ( a, b ) {\n      return a - b;\n    }\n\n    // calculate stats\n    for ( metric in entries ) {\n            entry = entries[ metric ];\n\n      if ( typeof entry.values[ 0 ] !== 'string' ) {\n        entry.values = entry.values\n                        .filter( filterEntryValues )\n                        .sort( sortEntryValues );\n      }\n\n      if ( entry.values.length === 0 ) {\n        continue;\n      }\n\n      entry.min = entry.values.slice( 0, 1 ).pop();\n      entry.max = entry.values.slice( -1 ).pop();\n\n      if ( typeof entry.values[ 0 ] === 'string' ) {\n        continue;\n      }\n\n      for ( var j = 0, len = entry.values.length++; j<len; j++ ) {\n        entry.sum += entry.values[ j ];\n      }\n\n      entry.average = + ( len && ( entry.sum / len ).toFixed( 2 ) );\n      entry.median = + ( ( (len % 2 === 0) ?\n                      ( ( entry.values[ len >> 1 ] + entry.values[ len >> 1 + 1 ] ) / 2 ) :\n                      entry.values[ len >> 1 ] ).toFixed( 2 ) );\n\n      // pushed failed assertion\n      // depending on median\n      // to failedAssertions sum up\n      if (\n        typeof this.options.assertions[ metric ] !== 'undefined' &&\n        _.indexOf( this.failedAssertions, metric ) === -1 &&\n        (\n          this.options.assertions[ metric ].type === '>' ||\n          this.options.assertions[ metric ].type === '<'\n        ) &&\n        typeof this.options.assertions[ metric ].value === 'number'\n      ) {\n        if (\n          this.options.assertions[ metric ].type === '>' &&\n          entry.median > this.options.assertions[ metric ].value\n        ) {\n          this.failedAssertions.push( metric );\n        }\n\n        if (\n          this.options.assertions[ metric ].type === '<' &&\n          entry.median < this.options.assertions[ metric ].value\n        ) {\n          this.failedAssertions.push( metric );\n        }\n      }\n    }\n\n    resolve( {\n      assertions       : assertions,\n      metrics          : entries,\n      offenders        : offenders\n    } );\n  }.bind( this ) );\n};\n\n\n/**\n * Get array of image paths\n *\n * @return {Array} Array of image paths\n */\nPhantomas.prototype.getImages = function() {\n  var files;\n\n  try {\n    files = fs.readdirSync( this.imagePath + '/' + this.timestamp );\n  } catch( e ) {\n    this.grunt.log.error( 'NO IMAGES FOR FILM STRIP VIEW FOUND' );\n    files = [];\n  }\n\n  return _.sortBy( files, _.bind( function( file ) {\n    return +file.match(\n      /^screenshot-\\d\\d\\d\\d-\\d\\d-\\d\\dT\\d\\d-\\d\\d-\\d\\d-(\\d*).png$/\n    )[ 1 ];\n  }, this ) );\n};\n\n\n/**\n * General function to start the whole thingy\n *\n * @tested\n */\nPhantomas.prototype.kickOff = function() {\n  this.grunt.log.subhead( 'PHANTOMAS EXECUTION(S) STARTED.' );\n\n  this.createIndexDirectory().bind( this )\n      // create data directory to prevent\n      // fileIO errors\n      .then( this.createDataDirectory )\n      // execute the phantomas process\n      // multiple runs according to\n      // configuration\n      .then( this.executePhantomas )\n      // format result and calculate\n      // max / min / median / average / ...\n      .then( this.formResult )\n      // write new file(s) with metrics data\n      .then( this.writeData )\n      // process data and generate\n      // ui if wanted\n      .then( this.processData )\n      // yeah we're done!!! :)\n      .then( this.showSuccessMessage )\n      // catch general bluebird error\n      .catch( Promise.RejectionError, function ( e ) {\n          console.error( 'unable to write file, because: ', e.message );\n      } )\n      // catch unknown error\n      .catch( function( e ) {\n        this.grunt.log.error( 'SOMETHING WENT WRONG...' );\n\n        if ( e.stack ) {\n          this.grunt.log.error( e.stack );\n        } else {\n          this.grunt.log.error( e );\n        }\n\n        this.grunt.event.emit( 'phantomasFailure', e );\n      }.bind( this ) )\n      .done();\n};\n\n\n/**\n * Normalize the handed in options object\n * to deal with legacy configs and different\n * allowed option settings\n *\n * @param  {Object} options options\n * @return {Object}         normalized options\n *\n * @tested\n */\nPhantomas.prototype.normalizeOptions = function( options ) {\n\n  options.assertions = _.mapValues( options.assertions, function( assertion ) {\n    return ( typeof assertion === 'number' ) ?\n    {\n      type  : '>',\n      value : assertion\n    } :\n    assertion;\n  } );\n\n  return options;\n};\n\n\n/**\n * Notify about not displayed metrics during\n * the build process\n *\n * @param  {Object} results results\n * @return {Promise}        Promise\n *\n * @tested\n */\nPhantomas.prototype.notifyAboutNotDisplayedMetrics = function( results ) {\n  return new Promise( function( resolve ) {\n    this.grunt.log.subhead( 'CHECKING FOR NOT DISPLAYED METRICS.' );\n\n    var resultKeys          = _.keys( results[ results.length - 1 ].metrics );\n    var displayedMetricKeys = _.flatten( _.values( this.options.group ) );\n\n    displayedMetricKeys.push( 'timestamp' );\n\n    var notDisplayedMetrics = _.difference( resultKeys, displayedMetricKeys );\n\n    this.grunt.log.ok(\n      'You are currently not displaying the following metrics:\\n' +\n      notDisplayedMetrics.join( ', ' )\n    );\n\n    resolve();\n  }.bind( this ) );\n};\n\n\n/**\n * Process data and build UI if wished\n *\n * @return {Promise} Promise\n *\n * @tested\n */\nPhantomas.prototype.processData = function() {\n  return new Promise( function( resolve, reject ) {\n    if ( this.options.buildUi ) {\n      if ( _.indexOf( this.options.output, 'json' ) !== -1 ) {\n        // read all generated metric files\n        // and prepare them for ui generation\n        this.readMetricsFiles().bind( this )\n            // generate index.html\n            .then( this.outputUi )\n            // resolve everything to go on\n            .then( resolve );\n      } else {\n        this.grunt.log.error(\n          'Your set ouput format is not compatible with building the UI.'\n        );\n\n        reject(\n          'Please set \\'output\\' to \\'json\\' if you want to build UI\\n\\n' +\n          '-- or --\\n\\n' +\n          'set \\'buildUi\\' to \\'false\\' if you want to get only the csv files.'\n        );\n      }\n    } else {\n      resolve();\n    }\n  }.bind( this ) );\n};\n\n\n/**\n * Handle the path of a metrics file and read it\n *\n * @param  {String} file file path to metrics file\n * @return {Promise}     Promise\n *\n * @tested\n */\nPhantomas.prototype.readMetricsFile = function( file ) {\n  return new Promise( function( resolve, reject ) {\n    fs.readFileAsync(\n      this.dataPath + file,\n      { encoding : 'utf8' }\n    ).bind( this )\n      .then( function( data ) {\n        try {\n          data = JSON.parse( data );\n        } catch( e ) {\n          // if it's not valid json\n          // let's fail\n          this.grunt.log.error(\n            'Sorry - ' + this.dataPath + file + ' is malformed'\n          );\n\n          return reject( e );\n        }\n        // set internal timestamp to work with it\n        // on frontend side later on\n        data.timestamp = +file.replace( /\\.json/gi, '' );\n\n        this.grunt.log.ok( '\\'' + file + '\\' looks good!' );\n\n        // provide backwards compability\n        // if no offenders data is present\n        if ( !data.offenders ) {\n          data.offenders = {};\n          data.metrics = JSON.parse( JSON.stringify( data ) );\n        }\n\n        resolve( data );\n      }.bind( this ) );\n  }.bind( this ) );\n};\n\n\n/**\n * Get data of all metrics files\n * included in data folder\n *\n * @return {Promise} Promise\n *\n * @tested\n */\nPhantomas.prototype.readMetricsFiles = function() {\n  return new Promise( function( resolve ) {\n    this.grunt.log.subhead( 'CHECKING ALL WRITTEN FILES FOR VALID JSON.' );\n\n    fs.readdirAsync( this.dataPath ).bind( this )\n      .then( function( files ) {\n        files = files.filter( function( file ) {\n          return file.match( /\\.json/gi );\n        } ).sort();\n\n        if (\n          typeof this.options.limitIncludedRuns === 'number' &&\n          this.options.limitIncludedRuns\n        ) {\n          files = files.slice( files.length - this.options.limitIncludedRuns );\n        }\n\n        files = files.map( function( file ) {\n            return this.readMetricsFile( file );\n        }, this );\n\n        Promise.settle( files ).bind( this )\n          .then( resolve )\n          .catch( function( e ) {\n            console.log( e );\n          } );\n      }.bind( this ) );\n  }.bind( this ) );\n};\n\n\n /**\n * Generate UI files if wished including creating index.html,\n * copying assets and so\n *\n * Do nothing if 'this.buildUI' is falsy\n *\n * @param  {Array}   files files\n * @return {Promise}       Promise\n *\n * @tested\n */\nPhantomas.prototype.outputUi = function( files ) {\n  this.grunt.log.subhead( 'BUILDING THE UI TO DISPLAY YOUR DATA.' );\n\n  return new Promise( function( resolve, reject ) {\n     this.createIndexHtml( files ).bind( this )\n         .then( this.notifyAboutNotDisplayedMetrics )\n         .then( this.copyAssets )\n         .then( resolve )\n         .catch( function( e ) {\n              reject( e );\n          } );\n  }.bind( this ) );\n};\n\n\n/**\n * Show final message and call grunt task callback afterwards\n *\n * @tested\n */\nPhantomas.prototype.showSuccessMessage = function() {\n  this.grunt.log.subhead( 'FINISHED PHANTOMAS.' );\n\n  this.done();\n};\n\n\n/**\n * Create json or csv data\n *\n * @param  {Object}  result phantomas result\n * @return {Promise}        Promise\n *\n * @tested\n */\nPhantomas.prototype.writeData = function( result ) {\n  this.grunt.log.subhead( 'WRITING RESULT FILES.' );\n\n  var runs = [];\n\n  return new Promise( function( resolve, reject ) {\n    if (\n      typeof result.metrics.requests !== 'undefined' &&\n      result.metrics.requests.values.length\n    ) {\n      // keep backwards compatibility\n      // to not break existant configurations\n      if ( typeof this.options.output === 'string' ) {\n        this.options.output = [ this.options.output ];\n      }\n\n      // iterate of output formats\n      // and write data\n      this.options.output.forEach( function( format ) {\n        if ( this._writeData[ format ] !== undefined ) {\n          runs.push(\n            this._writeData[ format ].bind( this )( result )\n          );\n        } else {\n          reject(\n            'Your set ouput format \\'' + format + '\\' is not supported.\\n' +\n            'PLEASE CHECK DOCUMENTATION FOR SUPPORTED FORMATS.'\n          );\n        }\n      }, this );\n\n      Promise.settle( runs )\n          .then( resolve );\n    } else {\n      reject( 'No run was successful.' );\n    }\n  }.bind( this ) );\n};\n\n\n/**\n * Object holding function to generate\n * several data formats\n *\n * @type {Object}\n */\nPhantomas.prototype._writeData = {\n  /**\n   * Create CSV with generated data\n   *\n   * @param  {Object} result result\n   * @return {Promise}       Promise\n   *\n   * @tested\n   */\n  csv  : function( result ) {\n    return new Promise( function( resolve, reject ) {\n      var displayedMetricKeys = _.keys( result.metrics );\n      var metrics             = {};\n\n      _.each( result.metrics, function( value, key ){\n        metrics[ key ] = result.metrics[ key ].average;\n      } );\n\n      json2csv( { data : result.metrics, fields : displayedMetricKeys } )\n        .then( function( csv ) {\n          var fileName = this.dataPath + this.timestamp + '.csv';\n\n          fs.writeFileAsync(\n            fileName,\n            csv\n          ).then( resolve );\n\n          this.grunt.log.ok( 'CSV file - ' + fileName  + ' - written.' );\n        }.bind( this ) )\n        .catch( function( e ) {\n          reject( e );\n        } );\n    }.bind( this ) );\n  },\n\n\n  /**\n   * Create JSON with generated data\n   *\n   * @param  {Object} result result\n   * @return {Promise}       Promise\n   *\n   * @tested\n   */\n  json : function( result ) {\n    return new Promise( function( resolve, reject ) {\n      var fileName = this.dataPath + this.timestamp + '.json';\n\n      fs.writeFileAsync(\n        fileName,\n        JSON.stringify( result, null, 2 )\n      )\n      .then( resolve )\n      .catch( reject );\n\n      this.grunt.log.ok( 'JSON file - ' + fileName + ' - written.' );\n    }.bind( this ) );\n  }\n};\n\nmodule.exports = Phantomas;\n","/home/travis/build/npmtest/node-npmtest-grunt-phantomas/node_modules/grunt-phantomas/tasks/phantomas.js":"/*\n * grunt-phantomas\n * https://github.com/stefanjudis/grunt-phantomas\n *\n * Copyright (c) 2013 stefan judis\n * Licensed under the MIT license.\n */\n\n'use strict';\n\nmodule.exports = function( grunt ) {\n  grunt.registerMultiTask(\n    'phantomas',\n    'Get metrics of your site and compare them.',\n    function() {\n      var done      = this.async();\n      var options   = this.options( {\n        additionStylesheet : false,\n        assertions         : {},\n        buildUi            : true,\n        limitIncludedRuns  : 30,\n        indexPath          : './phantomas/',\n        numberOfRuns       : 5,\n        options            : {},\n        output             : [ 'json', 'csv' ],\n        url                : 'http://gruntjs.com/',\n        group              : {\n          'REQUESTS' : [\n            'requests',\n            'gzipRequests',\n            'postRequests',\n            'httpsRequests',\n            'notFound',\n            'multipleRequests',\n            'maxRequestsPerDomain',\n            'domains',\n            'medianRequestsPerDomain',\n            'redirects',\n            'redirectsTime',\n            'smallestResponse',\n            'biggestResponse',\n            'smallestLatency',\n            'biggestLatency',\n            'medianResponse',\n            'medianLatency',\n            'assetsNotGzipped',\n            'assetsWithQueryString',\n            'smallImages'\n          ],\n          'TIMINGS' : [\n            'timeToFirstByte',\n            'timeToLastByte',\n            'timeToFirstCss',\n            'timeToFirstJs',\n            'timeToFirstImage',\n            'fastestResponse',\n            'slowestResponse',\n            'onDOMReadyTime',\n            'onDOMReadyTimeEnd',\n            'windowOnLoadTime',\n            'windowOnLoadTimeEnd',\n            'httpTrafficCompleted',\n            'timeBackend',\n            'timeFrontend'\n          ],\n          'HTML' : [\n            'bodyHTMLSize',\n            'iframesCount',\n            'imagesWithoutDimensions',\n            'commentsSize',\n            'hiddenContentSize',\n            'whiteSpacesSize',\n            'DOMelementsCount',\n            'DOMelementMaxDepth',\n            'nodesWithInlineCSS',\n            'foo'\n          ],\n          'JAVASCRIPT' : [\n            'eventsBound',\n            'documentWriteCalls',\n            'evalCalls',\n            'jsErrors',\n            'consoleMessages',\n            'windowAlerts',\n            'windowConfirms',\n            'windowPrompts',\n            'globalVariables',\n            'localStorageEntries',\n            'ajaxRequests'\n          ],\n          'DOM' : [\n            'DOMqueries',\n            'DOMqueriesById',\n            'DOMqueriesByClassName',\n            'DOMqueriesByTagName',\n            'DOMqueriesByQuerySelectorAll',\n            'DOMinserts',\n            'DOMqueriesDuplicated'\n          ],\n          'HEADERS' : [\n            'headersCount',\n            'headersSentCount',\n            'headersRecvCount',\n            'headersSize',\n            'headersSentSize',\n            'headersRecvSize'\n          ],\n          'CACHING' : [\n            'cacheHits',\n            'cacheMisses',\n            'cachePasses',\n            'cachingNotSpecified',\n            'cachingTooShort',\n            'cachingDisabled'\n          ],\n          'COOKIES' : [\n            'cookiesSent',\n            'cookiesRecv',\n            'domainsWithCookies',\n            'documentCookiesLength',\n            'documentCookiesCount'\n          ],\n          'COUNTS & SIZES' : [\n            'contentLength',\n            'bodySize',\n            'htmlSize',\n            'htmlCount',\n            'cssSize',\n            'cssCount',\n            'jsSize',\n            'jsCount',\n            'jsonSize',\n            'jsonCount',\n            'imageSize',\n            'imageCount',\n            'webfontSize',\n            'webfontCount',\n            'base64Size',\n            'base64Count',\n            'otherCount',\n            'otherSize'\n          ],\n          'JQUERY' : [\n            'jQueryOnDOMReadyFunctions',\n            'jQuerySizzleCalls'\n          ]\n        }\n      } );\n      var Phantomas = require(\n                        './lib/phantomas'\n                      );\n\n      // let's kick things off\n      var phantomas = new Phantomas( grunt, options, done );\n      phantomas.kickOff();\n    }\n  );\n};\n"}